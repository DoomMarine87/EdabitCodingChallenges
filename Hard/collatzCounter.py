"""A Collatz sequence is generated by repeatedly applying the following rules to an integer and then to each resulting integer in 
turn:

    If even: divide by 2.
    If odd: multiply by 3, then add 1.

The Collatz conjecture states that, for any initial positive integer, you will eventually reach the number 1.

Write a function that, for an initial positive integer n, returns a list containing 2 values:

    The number of times the Collatz rule has to be applied until you reach 1.
    The maximum number reached in the process.

Examples

collatz(17) ➞ [12, 52]
# Because 17 – 52 – 26 – 13 – 40 – 20 – 10 – 5 – 16 – 8 – 4 – 2 – 1
# takes 12 steps and 52 is the highest number reached.

collatz(6) ➞ [8, 16]

collatz(21) ➞ [7, 64]"""

def collatz(n):
    if n == 1:
        return [0,n]
    
    cSeq = []
    while n != 1:
        n = n * 3 + 1 if n%2 else n // 2
        cSeq.append(n)
    return [len(cSeq), max(cSeq)]

"""print(collatz(17)) # ➞ [12, 52]
# Because 17 – 52 – 26 – 13 – 40 – 20 – 10 – 5 – 16 – 8 – 4 – 2 – 1
# takes 12 steps and 52 is the highest number reached.
print(collatz(6)) # ➞ [8, 16]
print(collatz(21)) #➞ [7, 64]"""

print(collatz(1)) #, [0, 1])
print(collatz(3)) #, [7, 16])
print(collatz(9)) #, [19, 52])
print(collatz(27)) #, [111, 9232])
print(collatz(81)) #, [22, 244])

"""def collatz(n):
	c, m = 0, n
	while n > 1:
		n = n * 3 + 1 if n % 2 else n // 2
		c += 1
		m = max(m, n)
	return [c, m]"""